@using Wayfinder.Shared.Libraries.BooleanTree;


@typeparam DataTypeValidator;
@typeparam DataType where DataType : IBoolean<DataTypeValidator>;
@typeparam DataDisplayComponentType where DataDisplayComponentType : IBooleanEditComponent<DataTypeValidator>;
@typeparam DataEditComponentType where DataEditComponentType : IBooleanEditComponent<DataTypeValidator>;



@if( this.HasEditor ) {
    @("<div component-name=\"BooleanTreeEditor\" class=\"basic\">")
}

@foreach( IBoolean<DataTypeValidator> node in this.TreeData.Children ) {
    @if( node is BooleanTree<DataType, DataTypeValidator> ) {
        <BooleanTreeEditor
                HasEditor=@false
                DataType=@DataType
                DataDisplayComponentType=@DataDisplayComponentType
                DataEditComponentType=@DataEditComponentType
                TreeData=@((BooleanTree<DataType>)node) />
    } else {
        <DynamicComponent
                Type=@(typeof(DataDisplayComponentType))
                Parameters=@this.Parameterize((IBoolean)node) />
    }
}

@if( this.HasEditor ) {
    <DynamicComponent Type=@(typeof(DataEditComponentType)) />

    @("</div>")
}


@code {
    //[Inject]
    //public IJSRuntime Js { get; set; } = null!;

    //[Inject]
    //public ClientDataAccess Data { get; set; } = null!;


    [Parameter, EditorRequired]
    public bool HasEditor { get; set; }

    [Parameter, EditorRequired]
    public BooleanTree<DataType> TreeData { get; set; } = null!;

    IBoolean Data {
        get => (IBoolean)this.TreeData;
        set => this.TreeData = (BooleanTree<DataType>)value;
    }



    private IDictionary<string, object> Parameterize( IBoolean node ) {
        return new Dictionary<string, object> { { "Data", node } };
    }
}
