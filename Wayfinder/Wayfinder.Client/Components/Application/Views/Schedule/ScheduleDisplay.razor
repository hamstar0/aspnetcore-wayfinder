@using System.Net.Http;
@using System.Net.Http.Json;
@using Wayfinder.Shared.Libraries;
@using Wayfinder.Shared.Data.Entries.Descriptor;
@using Wayfinder.Shared.Data.Entries.Descriptor.DescriptorDataTypes;
@using Wayfinder.Client.Data;
@using Wayfinder.Client.Components.Standard;
@using Wayfinder.Client.Components.Application.Editors.DescriptorData;
@using Wayfinder.Client.Components.Application.Pickers;
@using Wayfinder.Shared.Data.Schedule;



<div component-name="ScheduleDisplay" class="basic schedule-component-container">
    <div>
        @this.AddedHeadButtonsPre

        @if( this.ConditionWindows is not null ) {
            <ToggleSwitch Label="Show Condition WIndows"
                          IsOn=@this.ShowConditions
                          IsOnChanged=@(async b => this.ShowConditions = b) />
        }

        <button @onclick=@(e => this.ScrollLeft_UI())>
            Remove Conditional Filtering
        </button>

        <button @onclick=@(e => this.ScrollLeft_UI())>
            &larr;
        </button>
        <button @onclick=@(e => this.ScrollRight_UI())>
            &rarr;
        </button>
        <button @onclick=@(e => this.Zoom_UI(this.ZoomScale * 0.5d))>
            +
        </button>
        <button @onclick=@(e => this.Zoom_UI(this.ZoomScale * 2d))>
            -
        </button>
    </div>
    
    <div class="schedule-component" style="max-width: @(ScheduleDisplay.MaxElementWidth)px;"
             @onmousedown=@(async (e) => await this.OnMouseDown_UI_Async(e))
             @onmouseup=@(async (e) => await this.OnMouseUp_UI_Async(e))
             @onmouseleave=@(async (e) => await this.OnMouseUp_UI_Async(e))>
        @if( this.CanDisplayMinuteMarkers() ) {
            @foreach( (int x, string label) in this.GetTimeUnitMinuteMarkers(ScheduleDisplay.MaxElementWidth) ) {
                <div class="timeline-minute" style="left: @(x)px;">@label</div>
            }
        }
        @if( this.CanDisplayHourMarkers() ) {
            @foreach( (int x, string label) in this.GetTimeUnitHourMarkers(ScheduleDisplay.MaxElementWidth) ) {
                <div class="timeline-hour" style="left: @(x)px;">@label</div>
            }
        }
        @if( this.CanDisplayDayMarkers() ) {
            @foreach( (int x, string label) in this.GetTimeUnitDayMarkers(ScheduleDisplay.MaxElementWidth) ) {
                <div class="timeline-day" style="left: @(x)px;">@label</div>
            }
        }
        @if( this.CanDisplayMonthMarkers() ) {
            @foreach( (int x, string label) in this.GetTimeUnitMonthMarkers(ScheduleDisplay.MaxElementWidth) ) {
                <div class="timeline-month" style="left: @(x)px;">@label</div>
            }
        }
        @if( this.CanDisplayYearMarkers() ) {
            @foreach( (int x, string label) in this.GetTimeUnitYearMarkers(ScheduleDisplay.MaxElementWidth) ) {
                <div class="timeline-year" style="left: @(x)px;">@label</div>
            }
        }
        
        @foreach( ScheduleEventEntry schedEvent in this.GetVisibleScheduleEvents() ) {
            <div class="schedule-timeline-seg"
                 style= "left: @(this.ComputeSegOffset(schedEvent.StartTime))px;
                         width: @(this.ComputeSegWidth(schedEvent.StartTime, schedEvent.EndTime))px;">
            </div>
        }
        
        @if( this.ConditionWindows is not null ) {
            @foreach( TimelineEvent<bool> condWindow in this.ConditionWindows.Events ) {
                <div class="schedule-timeline-cond-seg"
                     style= "left: @(this.ComputeSegOffset(condWindow.StartTime))px;
                             width: @(this.ComputeSegWidth(condWindow.StartTime, condWindow.EndTime))px;">
                </div>
            }
        }
    </div>

    @this.Footer
</div>

